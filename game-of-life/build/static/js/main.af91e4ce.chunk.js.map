{"version":3,"sources":["Game/Field/Cell/cell.js","Game/Field/field.js","Game/game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","x","y","width","isAlive","this","pos","context","document","getElementById","getContext","fillStyle","fillRect","Field","rows","cols","field","createField","Array","i","length","j","revive","draw","setState","Math","random","newField","survive","row","col","counterAlive","new_i","new_j","mod","n","m","PrettoSlider","withStyles","root","color","height","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","top","background","track","borderRadius","rail","Slider","CANVAS_WIDTH","CANVAS_HEIGHT","Game","props","intervalID","state","mouseDown","resolution","isRunning","generationCount","speed","setInterval","nextStep","clearInterval","nextGeneration","setRandomPopulation","ceil","setTimeout","e","canvas","getMousePos","floor","reviveCell","val","stop","animation","evt","rect","getBoundingClientRect","clientX","clientY","className","Button","variant","disabled","onClick","randomPopulation","clear","valueLabelDisplay","aria-label","defaultValue","min","max","step","onChange","handleResolutionChange","handleSpeedChange","id","onMouseDown","allowDrawOnCanvas","onMouseUp","onMouseMove","mouseMove","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.af91e4ce.chunk.js","sourcesContent":["/*\r\nThis class handles the behavior of a Cell for the field\r\n*/\r\n\r\nexport default class Cell{\r\n    constructor(x,y,width,isAlive=false, wasAlive=false){\r\n        this.pos={x:x,y:y};\r\n        this.width=width;\r\n        this.x = x;\r\n        this.isAlive=isAlive; //True=red, False=blue\r\n    }\r\n\r\n    //Sets the State of the Cell to a given state\r\n    setState(isAlive){\r\n        this.isAlive=isAlive;\r\n    }\r\n\r\n    //Sets the Cell to Alicw\r\n    revive(){\r\n        this.isAlive=true;\r\n    }\r\n\r\n    //Draws the Rectangle on the Canvas\r\n    draw(){\r\n        var canvas = document.getElementById(\"2d-plane\");\r\n        var context = canvas.getContext(\"2d\");\r\n        if(this.isAlive){\r\n            context.fillStyle=\"crimson\";\r\n        } else {\r\n            context.fillStyle=\"lightblue\";    \r\n        }\r\n        \r\n        context.fillRect(this.pos.x,this.pos.y,this.width,this.width); \r\n    }\r\n}","/**\r\n * Thisl File hanldes the Drawing of the Field for the Game of Life\r\n */\r\nimport Cell from \"./Cell/cell\";\r\n\r\nexport default class Field{\r\n    constructor(rows,cols,width){\r\n        this.field = this.createField(rows,cols,width);\r\n        this.rows=rows;\r\n        this.cols=cols;\r\n        this.width=width;\r\n    }\r\n   \r\n    //Creates the initial Field\r\n    createField(rows,cols,width){\r\n        let field = new Array(rows);\r\n        for(let i=0;i<field.length;i++){\r\n            field[i]= new Array(cols);\r\n            for(let j=0;j<field[i].length;j++){\r\n                field[i][j]=new Cell(i*width,j*width,width,false);\r\n            }\r\n        }\r\n        return field;\r\n    }\r\n\r\n    //Sets the fiven Cell to Alive and Redraws the Cell\r\n    reviveCell(i,j){\r\n        this.field[i][j].revive();\r\n        this.field[i][j].draw();\r\n    } \r\n\r\n    //Generates a Random Population\r\n    setRandomPopulation(){\r\n        for(let i=0;i<this.field.length;i++){\r\n            for(let j=0;j<this.field[0].length;j++){\r\n                this.field[i][j].setState(Math.random()>0.5);\r\n            }\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    //Computes the Next Generation and displays it\r\n    nextGeneration(){\r\n        let newField = this.createField(this.rows,this.cols,this.width);\r\n        for(let i=0;i<this.field.length;i++){\r\n            for(let j=0;j<this.field[0].length;j++){\r\n                if(this.survive(i, j)){\r\n                    newField[i][j].setState(true);\r\n                    continue;\r\n                } \r\n                newField[i][j].setState(false);\r\n            }\r\n        }\r\n        this.field=newField;\r\n        this.draw();\r\n    }\r\n\r\n    \r\n    //Draws the hole field\r\n    draw(){\r\n        for(let i=0;i<this.field.length;i++){\r\n            for(let j=0;j<this.field[0].length;j++){\r\n                this.field[i][j].draw();\r\n            }\r\n        }\r\n    }\r\n\r\n    //COmputes if a fiven Cell is gonna Survive in the next Generation\r\n    survive(row,col){\r\n        let counterAlive=0;\r\n        let new_i=0;\r\n        let new_j=0;\r\n        for(let i=row-1;i<=row+1;i++){\r\n            new_i=i;\r\n            for(let j=col-1;j<=col+1;j++){\r\n                new_j=j;\r\n                if(new_i===row && new_j===col) continue;\r\n                if(i<0 || i>this.field.length-1){\r\n                    new_i = this.mod(i,this.field.length);\r\n                }\r\n                if(j<0 || j>this.field[0].length-1){\r\n                    new_j = this.mod(j,this.field[0].length);\r\n                }\r\n                if(this.field[new_i][new_j].isAlive) counterAlive++;\r\n            }\r\n        }\r\n        if(this.field[row][col].isAlive && (counterAlive===2 || counterAlive===3)){\r\n            return true;\r\n        } \r\n    \r\n        if(!this.field[row][col].isAlive && counterAlive===3){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Moludo\r\n    mod(n, m) {\r\n        return ((n % m) + m) % m;\r\n    }\r\n}","import React from 'react';\r\nimport \"./game.css\";\r\nimport Field from \"./Field/field\";\r\nimport { Button, Slider } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n  Code for the custom slider look\r\n  * */ \r\n function ValueLabelComponent(props) {\r\n    const { children, open, value } = props;\r\n  \r\n    return (\r\n      <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n        {children}\r\n      </Tooltip>\r\n    );\r\n  }\r\n  ValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  };\r\n\r\n  const PrettoSlider = withStyles({\r\n    root: {\r\n      color: 'gray',\r\n      height: 8,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: '#fff',\r\n      border: '2px solid currentColor',\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n      top: 4,\r\n      '& *': {\r\n        background: 'transparent',\r\n        color: 'red',\r\n      },\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);\r\n/**End Slide Code */\r\n\r\n\r\nconst CANVAS_WIDTH=900;\r\nconst CANVAS_HEIGHT=380;\r\nconst DEFAULT_RESOLUTION=10;\r\nconst DEFAULT_SPEED=100;\r\n\r\nexport default class Game extends React.Component{\r\n    intervalID=0;\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            field: new Field(CANVAS_WIDTH/DEFAULT_RESOLUTION,CANVAS_HEIGHT/DEFAULT_RESOLUTION,DEFAULT_RESOLUTION),\r\n            mouseDown: false,\r\n            resolution: DEFAULT_RESOLUTION,\r\n            isRunning:false,\r\n            generationCount:0, \r\n            speed: DEFAULT_SPEED,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.field.draw();\r\n    }\r\n\r\n    //Starts the Game of Life and computes and displays the generation every this.state.speed ms\r\n    animation(){\r\n        this.setState({isRunning:true});\r\n        this.intervalID = setInterval(() => {\r\n            this.nextStep();\r\n        },this.state.speed);\r\n    }\r\n\r\n      //Stops the the Animation\r\n      stop(){\r\n        this.setState({isRunning:false});\r\n        clearInterval(this.intervalID);\r\n    } \r\n\r\n    //Calculates the next step for the Game\r\n    nextStep(){\r\n        this.state.field.nextGeneration();\r\n        this.setState({generationCount:this.state.generationCount+1});\r\n    }\r\n\r\n    //Generates a random population\r\n    randomPopulation(){\r\n        this.state.field.setRandomPopulation();\r\n    }\r\n\r\n    //Resets the Game of Life to the initial state\r\n    clear(){\r\n        this.setState({generationCount:0,field: new Field(Math.ceil(CANVAS_WIDTH/this.state.resolution),Math.ceil(CANVAS_HEIGHT/this.state.resolution),this.state.resolution)});\r\n        setTimeout(() => {\r\n            this.state.field.draw();\r\n        },10);\r\n    }\r\n\r\n    //Handles the Mousemovment over the Canvas (Adds red Cells)\r\n    mouseMove(e){\r\n        if(!this.state.mouseDown){\r\n            return;\r\n        } \r\n        var canvas = document.getElementById(\"2d-plane\");\r\n        var pos = this.getMousePos(canvas, e);\r\n        let i= Math.floor(pos.x/(this.state.resolution));\r\n        let j= Math.floor(pos.y/(this.state.resolution));\r\n        this.state.field.reviveCell(i,j);\r\n    }\r\n\r\n     //Handles the Resolution Change (Slider) and creates a new Field\r\n     handleResolutionChange(e, val){\r\n        this.setState({resolution: val, field: new Field(Math.ceil(CANVAS_WIDTH/val),Math.ceil(CANVAS_HEIGHT/val),val)});\r\n        setTimeout(() => {\r\n            this.state.field.draw();\r\n        },10);\r\n    }\r\n\r\n   //Handles the speed change for the iteration timer\r\n    handleSpeedChange(e, val){\r\n        this.setState({speed: val});\r\n        if(this.state.isRunning){\r\n            this.stop();\r\n            this.animation();\r\n        }\r\n    }\r\n\r\n    //Gets the Mouse position on the Canvas\r\n    getMousePos(canvas, evt) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n        x: evt.clientX - rect.left,\r\n        y: evt.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    //Sets the Variable on Mouse Down to true/ Mouse UP to false\r\n    allowDrawOnCanvas(){\r\n        this.setState({mouseDown: !this.state.mouseDown})\r\n    }\r\n\r\n    render(){\r\n        const {isRunning, generationCount}= this.state;\r\n        return(\r\n            <div className=\"game\">\r\n                <h1>Game Of Life</h1>\r\n                <Button variant=\"outlined\" disabled={isRunning} onClick={() => this.animation()}>Animation</Button>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={() => this.stop()}>Stop</Button>\r\n                <Button variant=\"outlined\" disabled={isRunning} onClick={() => this.nextStep()}>Next Step</Button>\r\n                <Button variant=\"outlined\" onClick={() => this.randomPopulation()}>Random Population</Button>\r\n                <Button variant=\"outlined\" onClick={() => this.clear()}>Clear</Button>\r\n                <div className=\"game__resolution__slider\">\r\n                    <div className=\"game__resolution__slider__label\">\r\n                        <h4>Resolution</h4>\r\n                        <PrettoSlider disabled={isRunning} valueLabelDisplay=\"off\"\r\n                        aria-label=\"pretto slider\" defaultValue={10} min={5} max={40} step={5}\r\n                        onChange={(e, val) => this.handleResolutionChange(e, val)}  \r\n                        />\r\n                    </div>\r\n                    <div className=\"game__resolution__slider__label\">\r\n                    <h4>Computation Speed</h4>\r\n                    <PrettoSlider valueLabelDisplay=\"off\"\r\n                        aria-label=\"pretto slider\" defaultValue={DEFAULT_SPEED} min={30} max={1020} step={30}\r\n                        onChange={(e, val) => this.handleSpeedChange(e, val)}  \r\n                    />\r\n                    </div>\r\n                </div>\r\n                <h4>Iterations: {generationCount}</h4>\r\n                <canvas className=\"game_canvas__2dplane\" id=\"2d-plane\" width={CANVAS_WIDTH} height={CANVAS_HEIGHT}\r\n                    onMouseDown={ ()=>this.allowDrawOnCanvas()}\r\n                    onMouseUp={()=>this.allowDrawOnCanvas()}\r\n                    onMouseMove={(e) => this.mouseMove(e)}\r\n                ></canvas>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import './App.css';\nimport Game from \"./Game/game\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}